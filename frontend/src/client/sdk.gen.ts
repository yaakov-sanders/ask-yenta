// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ChatChatWithMemoryData,
  ChatChatWithMemoryResponse,
  ChatCreateChatResponse,
  ChatGetChatHistoryData,
  ChatGetChatHistoryResponse,
  ChatGetChatsResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginTestTokenResponse,
  UserProfileCreateProfileFromTextData,
  UserProfileCreateProfileFromTextResponse,
  UserProfileGetUserProfileData,
  UserProfileGetUserProfileResponse,
  UserProfileUpdateProfileFromTextData,
  UserProfileUpdateProfileFromTextResponse,
  UserProfileUpdateUserProfileData,
  UserProfileUpdateUserProfileResponse,
  UsersCreatePrivateUserData,
  UsersCreatePrivateUserResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserMeResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersUpdateUserData,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class ChatService {
  /**
   * Get Chats
   * @returns ChatConversationsResponse Successful Response
   * @throws ApiError
   */
  public static getChats(): CancelablePromise<ChatGetChatsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/chat",
    })
  }

  /**
   * Create Chat
   * @returns ChatConversationCreationResponse Successful Response
   * @throws ApiError
   */
  public static createChat(): CancelablePromise<ChatCreateChatResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/chat",
    })
  }

  /**
   * Chat With Memory
   * @param data The data for the request.
   * @param data.chatConversationId
   * @param data.requestBody
   * @returns ChatMessageResponse Successful Response
   * @throws ApiError
   */
  public static chatWithMemory(
    data: ChatChatWithMemoryData,
  ): CancelablePromise<ChatChatWithMemoryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/chat/{chat_conversation_id}",
      path: {
        chat_conversation_id: data.chatConversationId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Chat History
   * @param data The data for the request.
   * @param data.chatConversationId
   * @param data.limit
   * @param data.lastMessageId
   * @returns ChatHistoryResponse Successful Response
   * @throws ApiError
   */
  public static getChatHistory(
    data: ChatGetChatHistoryData,
  ): CancelablePromise<ChatGetChatHistoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/chat/{chat_conversation_id}",
      path: {
        chat_conversation_id: data.chatConversationId,
      },
      query: {
        limit: data.limit,
        last_message_id: data.lastMessageId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UserProfileService {
  /**
   * Create Profile From Text
   * Create a new user profile from free-form text, which will be parsed by an LLM
   * into structured JSON and stored in the database.
   *
   * Returns 409 Conflict if a profile already exists for this user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserProfileResponse Successful Response
   * @throws ApiError
   */
  public static createProfileFromText(
    data: UserProfileCreateProfileFromTextData,
  ): CancelablePromise<UserProfileCreateProfileFromTextResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/{user_id}/profile-text",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Profile From Text
   * Update an existing user profile with free-form text.
   *
   * The LLM will analyze the existing profile and the new text,
   * then intelligently merge them to create an updated profile.
   *
   * Returns 404 Not Found if no profile exists for this user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserProfileResponse Successful Response
   * @throws ApiError
   */
  public static updateProfileFromText(
    data: UserProfileUpdateProfileFromTextData,
  ): CancelablePromise<UserProfileUpdateProfileFromTextResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/users/{user_id}/profile-text",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User Profile
   * Update an existing user profile directly with provided data.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserProfileResponse Successful Response
   * @throws ApiError
   */
  public static updateUserProfile(
    data: UserProfileUpdateUserProfileData,
  ): CancelablePromise<UserProfileUpdateUserProfileResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}/profile",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User Profile
   * Get the user profile summary generated by the LLM.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserLLMProfileSummary Successful Response
   * @throws ApiError
   */
  public static getUserProfile(
    data: UserProfileGetUserProfileData,
  ): CancelablePromise<UserProfileGetUserProfileResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/profile",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Private User
   * Create a user for private use.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createPrivateUser(
    data: UsersCreatePrivateUserData,
  ): CancelablePromise<UsersCreatePrivateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/private/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
