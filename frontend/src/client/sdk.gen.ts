// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ConnectionsCreateConnectionData, ConnectionsCreateConnectionResponse, ConnectionsReadConnectionsData, ConnectionsReadConnectionsResponse, ConnectionsReadConnectionData, ConnectionsReadConnectionResponse, ConnectionsUpdateConnectionData, ConnectionsUpdateConnectionResponse, ConnectionsDeleteConnectionData, ConnectionsDeleteConnectionResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UsersCreatePrivateUserData, UsersCreatePrivateUserResponse, UsersChatGetChatsResponse, UsersChatCreateChatData, UsersChatCreateChatResponse, UsersChatChatWithMemoryData, UsersChatChatWithMemoryResponse, UsersChatGetChatHistoryData, UsersChatGetChatHistoryResponse, UtilsHealthCheckResponse, YentaChatGetChatsResponse, YentaChatCreateChatResponse, YentaChatChatWithMemoryData, YentaChatChatWithMemoryResponse, YentaChatGetChatHistoryData, YentaChatGetChatHistoryResponse } from './types.gen';

export class ConnectionsService {
    /**
     * Create Connection
     * Create new connection request.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConnectionPublic Successful Response
     * @throws ApiError
     */
    public static createConnection(data: ConnectionsCreateConnectionData): CancelablePromise<ConnectionsCreateConnectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/connections/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Connections
     * Retrieve connections.
     * @param data The data for the request.
     * @param data.status
     * @param data.skip
     * @param data.limit
     * @returns ConnectionsPublic Successful Response
     * @throws ApiError
     */
    public static readConnections(data: ConnectionsReadConnectionsData = {}): CancelablePromise<ConnectionsReadConnectionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/connections/',
            query: {
                status: data.status,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Connection
     * Get connection by ID.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns ConnectionPublic Successful Response
     * @throws ApiError
     */
    public static readConnection(data: ConnectionsReadConnectionData): CancelablePromise<ConnectionsReadConnectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Connection
     * Update a connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @param data.requestBody
     * @returns ConnectionPublic Successful Response
     * @throws ApiError
     */
    public static updateConnection(data: ConnectionsUpdateConnectionData): CancelablePromise<ConnectionsUpdateConnectionResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Connection
     * Delete a connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteConnection(data: ConnectionsDeleteConnectionData): CancelablePromise<ConnectionsDeleteConnectionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Private User
     * Create a user for private use.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createPrivateUser(data: UsersCreatePrivateUserData): CancelablePromise<UsersCreatePrivateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/private/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersChatService {
    /**
     * Get Chats
     * @returns UsersChatsResponse Successful Response
     * @throws ApiError
     */
    public static getChats(): CancelablePromise<UsersChatGetChatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users-chat'
        });
    }
    
    /**
     * Create Chat
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UsersChatCreationResponse Successful Response
     * @throws ApiError
     */
    public static createChat(data: UsersChatCreateChatData): CancelablePromise<UsersChatCreateChatResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users-chat',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Chat With Memory
     * @param data The data for the request.
     * @param data.chatConversationId
     * @param data.requestBody
     * @returns UsersMessageResponse Successful Response
     * @throws ApiError
     */
    public static chatWithMemory(data: UsersChatChatWithMemoryData): CancelablePromise<UsersChatChatWithMemoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users-chat/{chat_conversation_id}',
            path: {
                chat_conversation_id: data.chatConversationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Chat History
     * @param data The data for the request.
     * @param data.chatConversationId
     * @param data.limit
     * @param data.lastMessageId
     * @returns UsersChatHistoryResponse Successful Response
     * @throws ApiError
     */
    public static getChatHistory(data: UsersChatGetChatHistoryData): CancelablePromise<UsersChatGetChatHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users-chat/{chat_conversation_id}',
            path: {
                chat_conversation_id: data.chatConversationId
            },
            query: {
                limit: data.limit,
                last_message_id: data.lastMessageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}

export class YentaChatService {
    /**
     * Get Chats
     * @returns YentaChatsResponse Successful Response
     * @throws ApiError
     */
    public static getChats(): CancelablePromise<YentaChatGetChatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/yenta-chat'
        });
    }
    
    /**
     * Create Chat
     * @returns YentaChatCreationResponse Successful Response
     * @throws ApiError
     */
    public static createChat(): CancelablePromise<YentaChatCreateChatResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/yenta-chat'
        });
    }
    
    /**
     * Chat With Memory
     * @param data The data for the request.
     * @param data.chatConversationId
     * @param data.requestBody
     * @returns YentaMessageResponse Successful Response
     * @throws ApiError
     */
    public static chatWithMemory(data: YentaChatChatWithMemoryData): CancelablePromise<YentaChatChatWithMemoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/yenta-chat/{chat_conversation_id}',
            path: {
                chat_conversation_id: data.chatConversationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Chat History
     * @param data The data for the request.
     * @param data.chatConversationId
     * @param data.limit
     * @param data.lastMessageId
     * @returns YentaChatHistoryResponse Successful Response
     * @throws ApiError
     */
    public static getChatHistory(data: YentaChatGetChatHistoryData): CancelablePromise<YentaChatGetChatHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/yenta-chat/{chat_conversation_id}',
            path: {
                chat_conversation_id: data.chatConversationId
            },
            query: {
                limit: data.limit,
                last_message_id: data.lastMessageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}