// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ChatConversationCreationResponse = {
    conversation_id: string;
};

export type ChatConversationInfo = {
    conversation_id: string;
    name: string;
};

export type ChatConversationsResponse = {
    conversations_info: Array<ChatConversationInfo>;
};

export type ChatHistoryResponse = {
    messages: Array<ChatMessage>;
};

export type ChatMessage = {
    content: string;
    message_type: string;
    role: 'user' | 'yenta';
};

export type role = 'user' | 'yenta';

export type ChatMessageRequest = {
    message: string;
};

export type ChatMessageResponse = {
    messages: Array<ChatMessage>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserLLMProfileSummary = {
    user_id: string;
    profile_summary: string;
    updated_at: string;
};

export type UserProfileResponse = {
    status: string;
    profile: {
        [key: string]: unknown;
    };
};

export type UserProfileText = {
    text: string;
};

export type UserProfileUpdate = {
    data: {
        [key: string]: (unknown | null);
    };
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ChatGetChatsResponse = (ChatConversationsResponse);

export type ChatCreateChatResponse = (ChatConversationCreationResponse);

export type ChatChatWithMemoryData = {
    chatConversationId: string;
    requestBody: ChatMessageRequest;
};

export type ChatChatWithMemoryResponse = (ChatMessageResponse);

export type ChatGetChatHistoryData = {
    chatConversationId: string;
    lastMessageId?: (string | null);
    limit?: number;
};

export type ChatGetChatHistoryResponse = (ChatHistoryResponse);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type UserProfileCreateProfileFromTextData = {
    requestBody: UserProfileText;
    userId: string;
};

export type UserProfileCreateProfileFromTextResponse = (UserProfileResponse);

export type UserProfileUpdateProfileFromTextData = {
    requestBody: UserProfileText;
    userId: string;
};

export type UserProfileUpdateProfileFromTextResponse = (UserProfileResponse);

export type UserProfileUpdateUserProfileData = {
    requestBody: UserProfileUpdate;
    userId: string;
};

export type UserProfileUpdateUserProfileResponse = (UserProfileResponse);

export type UserProfileGetUserProfileData = {
    userId: string;
};

export type UserProfileGetUserProfileResponse = (UserLLMProfileSummary);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UsersCreatePrivateUserData = {
    requestBody: PrivateUserCreate;
};

export type UsersCreatePrivateUserResponse = (UserPublic);

export type UtilsHealthCheckResponse = (boolean);