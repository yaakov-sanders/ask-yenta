// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ConnectionCreate = {
    status?: ConnectionStatus;
    target_user_id: string;
};

export type ConnectionPublic = {
    status?: ConnectionStatus;
    id: string;
    source_user_id: string;
    target_user_id: string;
    created_at: string;
    updated_at: string;
};

export type ConnectionsPublic = {
    data: Array<ConnectionPublic>;
    count: number;
};

export type ConnectionStatus = 'pending' | 'accepted' | 'rejected';

export type ConnectionUpdate = {
    status?: ConnectionStatus;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type UserCreate = {
    email: string;
    full_name: string;
    is_active?: boolean;
    is_superuser?: boolean;
    password: string;
};

export type UserPublic = {
    email: string;
    full_name: string;
    is_active?: boolean;
    is_superuser?: boolean;
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name: string;
};

export type UsersChatCreationRequest = {
    participant_ids: Array<(string)>;
};

export type UsersChatCreationResponse = {
    conversation_id: string;
};

export type UsersChatHistoryResponse = {
    messages: Array<UsersChatMessage>;
};

export type UsersChatInfo = {
    conversation_id: string;
    name: string;
    participant_ids: Array<(string)>;
};

export type UsersChatMessage = {
    content: string;
    message_type: string;
    sender_id: string;
};

export type UsersChatsResponse = {
    chats_info: Array<UsersChatInfo>;
};

export type UsersMessageRequest = {
    message: string;
};

export type UsersMessageResponse = {
    messages: Array<UsersChatMessage>;
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    full_name: string;
    is_active?: boolean;
    is_superuser?: boolean;
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type YentaChatCreationResponse = {
    conversation_id: string;
};

export type YentaChatHistoryResponse = {
    messages: Array<YentaChatMessage>;
};

export type YentaChatInfo = {
    conversation_id: string;
    name: string;
};

export type YentaChatMessage = {
    content: string;
    message_type: string;
    role: 'user' | 'yenta';
};

export type role = 'user' | 'yenta';

export type YentaChatsResponse = {
    chats_info: Array<YentaChatInfo>;
};

export type YentaMessageRequest = {
    message: string;
};

export type YentaMessageResponse = {
    messages: Array<YentaChatMessage>;
};

export type ConnectionsCreateConnectionData = {
    requestBody: ConnectionCreate;
};

export type ConnectionsCreateConnectionResponse = (ConnectionPublic);

export type ConnectionsReadConnectionsData = {
    limit?: number;
    skip?: number;
    status?: (ConnectionStatus | null);
};

export type ConnectionsReadConnectionsResponse = (ConnectionsPublic);

export type ConnectionsReadConnectionData = {
    connectionId: string;
};

export type ConnectionsReadConnectionResponse = (ConnectionPublic);

export type ConnectionsUpdateConnectionData = {
    connectionId: string;
    requestBody: ConnectionUpdate;
};

export type ConnectionsUpdateConnectionResponse = (ConnectionPublic);

export type ConnectionsDeleteConnectionData = {
    connectionId: string;
};

export type ConnectionsDeleteConnectionResponse = (unknown);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UsersCreatePrivateUserData = {
    requestBody: PrivateUserCreate;
};

export type UsersCreatePrivateUserResponse = (UserPublic);

export type UsersChatGetChatsResponse = (UsersChatsResponse);

export type UsersChatCreateChatData = {
    requestBody: UsersChatCreationRequest;
};

export type UsersChatCreateChatResponse = (UsersChatCreationResponse);

export type UsersChatChatWithMemoryData = {
    chatConversationId: string;
    requestBody: UsersMessageRequest;
};

export type UsersChatChatWithMemoryResponse = (UsersMessageResponse);

export type UsersChatGetChatHistoryData = {
    chatConversationId: string;
    lastMessageId?: (string | null);
    limit?: number;
};

export type UsersChatGetChatHistoryResponse = (UsersChatHistoryResponse);

export type UtilsHealthCheckResponse = (boolean);

export type YentaChatGetChatsResponse = (YentaChatsResponse);

export type YentaChatCreateChatResponse = (YentaChatCreationResponse);

export type YentaChatChatWithMemoryData = {
    chatConversationId: string;
    requestBody: YentaMessageRequest;
};

export type YentaChatChatWithMemoryResponse = (YentaMessageResponse);

export type YentaChatGetChatHistoryData = {
    chatConversationId: string;
    lastMessageId?: (string | null);
    limit?: number;
};

export type YentaChatGetChatHistoryResponse = (YentaChatHistoryResponse);